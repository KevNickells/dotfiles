

#at work or at home, change file opening program
COMPUTER_NAME=$(uname -n)

function open_this_folder {
    dolphin $1 &
}

# Just so tired of that extra keypress
function exiter {
    exit echo
}

# open recent files
function open_last_git_commits_and_most_recent_directory {
    cd $(git rev-parse --show-toplevel)
    vim $(grf)
}

function docker_clean {
  docker stop $(docker ps -a -q)
  docker rm $(docker ps -a -q)
  docker rmi $(docker images -q)
}

function git_options {
    while getopts "a:h:n:s:" opt
    do
        case $opt in
            a) git_commit_push $OPTARG
                ;;
            h) echo  "options are:
                -a -> Do not add all
                    -s -> Append [ci skip]
                    -n -> note to self, plugins, or vim spellings"
                    ;;
                n) git_add_commit_push "Note to self / plugins / vim spellings"
                    ;;
                s) git_add_commit_push $OPTARG" [ci skip]"
                    ;;

                esac
            done
            if (( $OPTIND == 1 ))
            then
                git_add_commit_push $1
    fi
}

# TODO definitely needs a bit of DRY and to figure out using both things
function git_commit_push {
    INPUT=$1

    while true
    do
        case $INPUT in
            "") echo ${red_with_blue}Needs a commit message, exiting${default}; break;;
        esac

        echo ${magenta_with_yellow}These files were affected: ${default}:

        echo $(git diff --cached --name-only)

        read yesno"?Is that ok? Yes or no? "
        case "$yesno" in
            [Yy]* ) cd $(git rev-parse --show-toplevel) &&
                git commit -m \"$1\" &&
                git push &&
                cd -; break;;

        [Nn]* ) break;;
        * ) echo "The question was yes or no, dickface"
    esac
done
}

function git_add_commit_push {
    INPUT=$1

    while true
    do
        case $INPUT in
            "") echo ${red_with_blue}Needs a commit message, exiting${default}; break;;
        esac

        echo ${magenta_with_yellow}These files were affected: ${default}:

        echo $(git status -s)

        read yesno"?Is that ok? Yes or no?"
        case "$yesno" in
            [Yy]* ) cd $(git rev-parse --show-toplevel) &&
                git add . &&
                git commit -m $1 &&
                git push &&
                cd -; break;;

        [Nn]* ) break;;
        * ) echo "The question was yes or no, dickface"
    esac
done
}

# self explanatory name
function mkdir_and_cd {
    INPUT=$1
    mkdir $1 && cd $1
}

# go down n folders; go down one if noe value given
    function down_n_folder {
        if [ -n "$1" ]; then
            for n in {1..$1}
            do
                cd ../
            done
        else
            cd ../
        fi
    }

# git branch as inline text
function git_brancher {
    echo $(git branch -a) | tr " " \\n
}

# change directory / store last directory
function cd_and_chill {
    \cd $1
    echo $(pwd) > ~/.last_dir
}

# powerline bits...
function powerline_precmd() {
    PS1="$(powerline-shell --shell zsh $?)"
}

function install_powerline_precmd() {
    for s in "${precmd_functions[@]}"; do
        if [ "$s" = "powerline_precmd" ]; then
            return
        fi
    done
    precmd_functions+=(powerline_precmd)
}

function tree() {
  folders=$(find .)

  echo $folders | sed -e 's/\s/\n/g' > .tree

  while read line; do
    nested_folder_count=$(echo $line | tr -cd '/' | wc -c)
    indents=$(seq -s "\t" $nested_folder_count | sed 's/[0-9]//g')
    tabs 2
    echo -e $indents$line
  done < .tree
  rm .tree
}

function pip_install_save {
    sudo pip install $1 && pip freeze | grep $1 >> requirements.txt
}

function find_by_port_no {
  sudo netstat -tulpn | grep -w $1
}

function find_and_kill_port {
  port_details=$(find_by_port_no $1)
  echo $port_details

  if [ -n "$port_details" ]; then
    process_no=$(echo $port_details \
      | sed 's/\/.\+$//g' \
      | sed 's/.\+[[:space:]]//g')

    sudo kill $process_no
    echo "killed port $1, process no: $process_no"
    echo "Port details were: $port_details"
  else
    echo "nothing found on port $1"
  fi
}

function find_in_history {
  history | grep $1
}
if [ "$TERM" != "linux" ]; then
    install_powerline_precmd
fi

function git_checkout_and_switch_to_branch {
  git pull
  git checkout -b $1
  git push --set-upstream origin $1
}

function git_clean_branches {
  cleanup=$(git branch \
    | grep -v "master" \
    | grep -v "staging" \
    | xargs git branch -D
  ) 2> /dev/null

  if [ -z $cmd ];
  then
    echo "nothing to cleanup"
  fi
}

function docker_stop_instance {
  { docker stop $1 &> /dev/null &&
    docker container rm $1 &> /dev/null &&
    echo "stopped $1"
  } || {
    echo "already stopped $1"
  }
}


