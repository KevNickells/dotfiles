"------------------ Obvious stuff
"Tab as two spaces
set tabstop=2 softtabstop=0 expandtab shiftwidth=2 smarttab

" Should allow me to notice Windows files easilyer
set ffs=unix

"Turns off compatibility with vi
set nocompatible

" Scroll with mouse.
set mouse=n

" text width
set tw=80

"Don't include a swapfile
set noswapfile

" Set clipboard as global register for vim
set clipboard=unnamedplus

"Let's be honest, no-one really cares about case when searching.
set ignorecase

" Except when they do - this mostly ignores case except when upper
set smartcase

" Because apparently by default backspace doesn't do what you'd expect
set backspace=indent,eol,start

" gives a count when searching for a thing in a file
set shortmess-=S


"------------------ End obvious stuff
"

" vim preferentially creates a new file, rather than updating the existing one.
" this is normally not a problem but apparently is with Docker bindings. The
" more you know etc
set backupcopy=yes

" timeoutlength; dddd interferes a bit with dd....
set timeout
set timeoutlen=300 ttimeoutlen=0

"Colourscheme stuff
set background=dark
try
    colorscheme scheakur
catch
endtry

"line numbers
set number

"statusline - show file path and n/n line
set statusline=%F
set statusline+=\ \ \ \ \ \
set statusline+=%l/%L

"  Enable folding
augroup filetype_vim
    autocmd!
    autocmd FileType vim setlocal foldmethod=marker
augroup END

" Dunno why this would be anything other than 0 but it sometimes is apparently
set foldminlines=0

" bats is a *sh testing framework
autocmd BufRead, BufNewFile *.bats set filetype=zsh

" keeps buffers open in the background
set hidden

"highlight line and column
set cursorline
set cursorcolumn

"enable syntax and plugins (for netrw)
syntax enable
filetype plugin on

"Text over 80 chars in red
highlight OverLength ctermfg=red guibg=#592929
match OverLength /\%81v.\+/

"fzf as global search ting
set rtp+=/usr/local/opt/fzf

"Relative number when in normal mode, not relative otherwise
set number relativenumber

augroup newFileStuff
    autocmd!
    au BufNewFile,BufRead,BufReadPost * set noscrollbind
    au BufNewFile,BufRead,BufReadPost * set nocursorbind
    au BufNewFile,BufRead,BufReadPost * diffoff
augroup END

augroup numbertoggle
    autocmd!
    autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
    autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

let g:tidal_target = "terminal"
